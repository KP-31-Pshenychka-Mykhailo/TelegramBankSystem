

userRoutes.MapPost("/logIn", async ([FromBody] LogInDto dto) =>
{
    logger.LogInformation($"User {dto.UserID} attempting login...");
    var userIdCheckHandler = new UserUniquenessHandler(connectionStringDataBase);
    var snpValidationHandler = new SnpValidationHandler();
    var phoneNumberValidationHandler = new PhoneNumberValidationHandler();
    var passwordValidationHandler = new PasswordValidationHandler();
    var userRegistrationHandler = new UserRegistrationHandler(connectionStringDataBase);

    userIdCheckHandler
        .SetNext(snpValidationHandler)
        .SetNext(phoneNumberValidationHandler)
        .SetNext(passwordValidationHandler)
        .SetNext(userRegistrationHandler);

    return await userIdCheckHandler.HandleAsync(dto);
});

userRoutes.MapPost("/signIn", async ([FromBody] SignInDto dto) =>
{
    logger.LogInformation($"User {dto.NewUserID} attempting sign in...");
    var oldUserIDCheckHandler = new UserExistenceHandler(connectionStringDataBase);
    var passwordOldUserIDChecker = new PasswordExistenceHandler(connectionStringDataBase);
    var newUserIDCheckHandler = new UserUniquenessHandler(connectionStringDataBase);
    var updateUserInformation = new UpdateAccountInformation(connectionStringDataBase);

    oldUserIDCheckHandler
        .SetNext(passwordOldUserIDChecker)
        .SetNext(newUserIDCheckHandler)
        .SetNext(updateUserInformation);

    return await oldUserIDCheckHandler.HandleAsync(dto);
});



transactionRoutes.MapPost("/transfer", async ([FromBody] TransferDto dto) =>
{
    logger.LogInformation($"User {dto.UserID} attempting transfer to {dto.RecientID} with amount {dto.AmountOfMoney}...");
    var accountExistenceHandler = new AccountExistenceHandler(connectionStringDataBase);
    var balanceCheckHandler = new BalanceCheckHandler(connectionStringDataBase);
    var transferHandler = new TransferHandler(connectionStringDataBase);

    accountExistenceHandler
        .SetNext(balanceCheckHandler)
        .SetNext(transferHandler);

    return await accountExistenceHandler.HandleAsync(dto);
});

transactionRoutes.MapPost("/replenishment", async ([FromBody] ReplenishmentDto dto) =>
{
    logger.LogInformation($"User {dto.UserID} attempting replenishment with amount {dto.AmountOfMoney}...");
    var accountExistenceHandler = new AccountExistenceHandler(connectionStringDataBase);
    var replenishmentHandler = new ReplenishmentHandler(connectionStringDataBase);

    accountExistenceHandler.SetNext(replenishmentHandler);

    return await accountExistenceHandler.HandleAsync(dto);
});

transactionRoutes.MapPost("/withdrawal", async ([FromBody] WithdrawalDto dto) =>
{
    logger.LogInformation($"User {dto.UserID} attempting withdrawal with amount {dto.AmountOfMoney}...");
    var accountExistenceHandler = new AccountExistenceHandler(connectionStringDataBase);
    var balanceCheckHandler = new BalanceCheckHandler(connectionStringDataBase);
    var withdrawalHandler = new WithdrawalHandler(connectionStringDataBase);

    accountExistenceHandler
        .SetNext(balanceCheckHandler)
        .SetNext(withdrawalHandler);

    return await accountExistenceHandler.HandleAsync(dto);
});

transactionRoutes.MapPost("/showinformation", async ([FromBody] ShowInformationDto dto) =>
{
    logger.LogInformation($"User {dto.UserID} send request for showing information...");
    var showInformationHandler = new ShowInformationHandler(connectionStringDataBase);

    return await showInformationHandler.HandleAsync(dto);
});